{"version":3,"sources":["CA.js","App.js","index.js"],"names":["neighbors","CA","constructor","grid","live","surv","this","next","ca","countNeighbor","i","k","currCount","w","h","x","y","length","newGrid","map","a","slice","forEach","row","col","nbCount","numCols","rules","maze","mazectric","ruleList","CAMazeSelector","props","_jsxs","style","display","children","_jsx","classID","width","height","backgroundColor","isCA","border","onClick","setIsCA","CAPanel","value","currRule","onChange","event","val","target","setCurrRule","setLive","setSurv","Array","fill","rule","concat","className","newLive","newSurv","Spacer","setOneIsColor","oneIsColor","MazePanel","Board","arr","gridTemplateColumns","pxSize","isOn","newArr","setGrid","Game","useState","setIsOn","randLevel","setRandLevel","isOnRef","useRef","useEffect","console","log","c","gameUpdate","current","setTimeout","type","Number","Math","random","App","ReactDOM","render","_Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.0edd55eb.chunk.js","sourcesContent":["\nconst neighbors = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n];\n\nexport class CA {\n    grid;\n    live;\n    surv;\n\n    constructor(grid, live, surv) {\n        this.grid = grid;\n        this.live = live;\n        this.surv = surv;\n\n        return this;\n    }\n\n    next() {\n        this.ca();\n        return this.grid;\n    }\n\n    countNeighbor(i, k) {\n        var currCount = 0;\n\n        for (let [w, h] of neighbors) {\n            const x = i + w;\n            const y = k + h;\n\n            if (x >= 0 && x < this.grid.length && y >= 0 && y < this.grid[0].length){\n               currCount += this.grid[x][y]; \n            }\n        }\n\n        return currCount;\n    }\n\n    ca() {\n        var newGrid = this.grid.map((a) => a.slice());\n        this.grid.forEach((row, i) => {\n            row.forEach((col, k) => {\n                var nbCount = this.countNeighbor(i, k);\n               if ((this.grid[i][k] && !this.surv[nbCount]) || (!this.grid[i][k] && this.live[nbCount])) {\n                newGrid[i][k] = !newGrid[i][k];\n               }\n            })\n        })\n        this.grid = newGrid;\n    }\n\n\n}","import React, { useState, useRef, useEffect } from 'react';\n// import ReactDOM from 'react-dom'\nimport * as ca from \"./CA.js\";\nconst numRows = 100;\nconst numCols = 100;\nconst pxSize = 8;\nconst buttonSize = 20;\n\n\nconst rules = {\n  maze : {\n    surv : [0, 1, 1, 1, 1, 1, 0, 0, 0],\n    live : [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  },\n\n  mazectric : {\n    surv : [0, 1, 1, 1, 1, 0, 0, 0, 0],\n    live : [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  },\n\n  'game of life' : {\n    surv : [0, 0, 1, 1, 0, 0, 0, 0, 0],\n    live : [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  },\n};\n\nconst ruleList = [\n  'maze', 'mazectric', 'game of life', 'free',\n];\n\nfunction CAMazeSelector(props) {\n  return (\n    <div style={{display:\"flex\"}}>\n      <div \n        classID={\"CAOption\"}\n        style={{\n          width: 130,\n          height: 20,\n          backgroundColor: props.isCA ? \"pink\" : \"white\",\n          border: \"solid 1px black\"\n        }}\n        onClick={() => props.setIsCA(!props.isCA)}\n      >Cellular Automata</div>\n      <div \n        classID={\"MazeOption\"}\n        style={{\n          width: 130,\n          height: 20,\n          backgroundColor: !props.isCA ? \"pink\" : \"white\",\n          border: \"solid 1px black\"\n        }}\n        onClick={() => props.setIsCA(!props.isCA)}\n      >Maze</div>\n    </div>\n  )\n}\n\nfunction CAPanel(props) {\n  \n  return (\n    <div>\n      <form>\n        <label>\n          Select rule \n          <select value={props.currRule} onChange={(event) => {\n            const val = event.target.value;\n            props.setCurrRule(val);\n            if (val !== 'free') {\n            props.setLive(rules[val]['live']);\n            props.setSurv(rules[val]['surv']);\n          } else {\n            props.setLive(new Array(9).fill(0));\n            props.setSurv(new Array(9).fill(0));\n          }}}>\n            {ruleList.map((rule) => <option value={rule} key={`${rule}`}>{rule}</option>)}\n          </select>\n        </label>\n      </form>\n      <div> \n        <h3>A cell will come to life with</h3>\n        <div style={{display: \"flex\"}}>\n          {props.live.map((val, i) => \n            <div key={i} \n              className='botton'\n              style={{\n                height: buttonSize, \n                width: buttonSize, \n                backgroundColor: val ? \"lightgreen\" : \"white\",\n                border: \"solid 1px black\"}}\n                onClick={() => {\n                if (props.currRule === 'free') {\n                  var newLive = [...props.live];\n                  newLive[i] = !props.live[i];\n                  props.setLive(newLive);\n                }\n              }}>\n            {i}\n            </div>)}\n        </div>\n        <h3>living neighbors,</h3>\n        <h3>and survive with</h3>\n        <div style={{display: \"flex\"}}>\n          {props.surv.map((val, i) => \n            <div key={i} \n              className='botton'\n              style={{\n                height: buttonSize, \n                width: buttonSize, \n                backgroundColor: val ? \"skyblue\" : \"white\",\n                border: \"solid 1px black\"}}\n              onClick={() => {\n                if (props.currRule === 'free') {\n                  var newSurv = [...props.surv];\n                  newSurv[i] = !props.surv[i];\n                  props.setSurv(newSurv);\n                 }\n                }}>\n            {i}\n            </div>)}\n        </div>\n        <h3>living neighbors,</h3>\n        <h3>or be dead otherwise.</h3>\n        \n        <Spacer/>\n\n        <button onClick={() => {props.setOneIsColor(!props.oneIsColor)}}>flip color scheme!</button>\n      </div>\n    </div>\n  )\n}\n\nfunction MazePanel(props) {\n  //TODO\n  return (\n    <div>\n      Maze panel - coming very very soon!\n    </div>\n  )\n}\n\nfunction Board(props) {\n  const arr = props.grid;\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${numCols}, ${pxSize + 2}px)`\n      }}>\n      {arr.map((row, i) => (\n          row.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              style={{\n                width: pxSize,\n                height: pxSize,\n                backgroundColor: (arr[i][k] && props.oneIsColor) || (!arr[i][k] && !props.oneIsColor) ? \"green\" : \"white\",\n                border: \"solid 1px black\"\n              }}\n              onClick={() => {\n                if (!props.isOn) {\n                  var newArr = [...arr];\n                  newArr[i][k] = !arr[i][k];\n                  props.setGrid(newArr);\n                 \n                }\n              }}\n            />\n          ))\n      ))}\n    </div>\n  );\n}\n\nfunction Spacer() {\n  return <div style={{width: 20, height: 20}}/>\n}\n\nfunction Game() {\n  var [grid, setGrid] = useState(() => Array(numRows).fill().map(() => new Array(numCols).fill(0)));\n  var [surv, setSurv] = useState(rules.maze.surv);\n  var [live, setLive] = useState(rules.maze.live);\n  var [currRule, setCurrRule] = useState('maze');\n  var [isCA, setIsCA] = useState(true);\n  var [isOn, setIsOn] = useState(false);\n  var [randLevel, setRandLevel] = useState(0.05);\n  var [oneIsColor, setOneIsColor] = useState(true);\n  \n  const isOnRef = useRef(isOn);\n  useEffect(() => {\n      console.log(\"starting effect\");\n      var c = new ca.CA(grid, live, surv);\n      function gameUpdate() {\n            if (isOnRef.current) {\n              setGrid(c.next());\n              setTimeout(() => gameUpdate(), 10);\n            } \n      }\n      gameUpdate();\n  }, [isOn]);\n  \n  return (\n    <div>\n      <div style={{display:\"flex\"}}>\n        <Board grid={grid} setGrid={setGrid} rule={currRule} isOn={isOn} oneIsColor={oneIsColor}/>\n       \n        <Spacer/>\n\n        <div>\n          <CAMazeSelector isCA={isCA} setIsCA={setIsCA}/>\n\n          <Spacer/>\n          \n          <div>\n            {isCA ?  \n              <CAPanel currRule={currRule} setCurrRule={setCurrRule} surv={surv} setSurv={setSurv} live={live} setLive={setLive} oneIsColor={oneIsColor} setOneIsColor={setOneIsColor}/>\n              :\n              <MazePanel/>}\n          </div>\n\n          <Spacer/>\n\n          <button classID=\"playPauseButton\" onClick={() => {\n            setIsOn(!isOn);\n            isOnRef.current = !isOn;\n            }}>\n            {!isOn ? \"play\" : \"pause\"}\n          </button>\n          \n          <button classID=\"resetButton\" onClick={() => {\n            setGrid(() => Array(numRows).fill().map(() => new Array(numCols).fill(0)));\n            setIsOn(false);}}>\n            {\"reset\"}\n          </button>\n\n        </div>\n      </div>\n\n      <Spacer/>\n\n      <div style={{display: \"flex\"}}>\n          <form>\n            <label>\n              random level (0 - 1): \n              <input type=\"text\" value={randLevel} onChange={\n                (event) => \n                  {let value = event.target.value;\n                    Number(value) == value && value >= 0 && value <= 1 ? \n                    setRandLevel(event.target.value) : setRandLevel(randLevel)}\n              }/>\n            </label>\n          </form>\n          <button onClick={() => {\n            var newArr = new Array(numRows).fill().map(\n              () => new Array(numCols).fill().map(\n                () => Math.random() < randLevel ? 1 : 0));\n            setGrid(newArr);\n          }}>randomize!</button>\n\n      </div>\n    </div>\n  ) \n}\n\nfunction App() {\n\n return (\n   <Game />\n )\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <h1>\n      Cellular Automata / Maze (coming up)\n    </h1>\n    <div>\n      <App />\n    </div>\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}