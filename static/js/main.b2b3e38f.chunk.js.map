{"version":3,"sources":["enums.js","CA.js","Maze.js","PlayPauseReset.js","Randomizer.js","Board.js","CAPanel.js","CAMazeSelector.js","MazePanel.js","Game.js","App.js","index.js"],"names":["CA","MAZE","neighbors","constructor","grid","live","surv","setGrid","isOnRef","this","show","current","ca","setTimeout","countNeighbor","i","k","currCount","w","h","x","y","length","ENUM","newGrid","map","a","slice","forEach","row","col","nbCount","_q","_classPrivateFieldLooseKey","_front","_back","Queue","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","push","obj","pop","isEmpty","ret","_setGrid","_visited","_start","_goal","_toVisit","_paths","_grid","_isOnRef","_setCannotFindPath","_setFoundGoal","_setIsOn","Maze","rule","start","goal","setIsOn","Error","getInBoundNeighbors","nb","deepcopy","n","n_x","n_y","concat","search","alert","cell","pathsToN","p_x","p_y","PlayPauseReset","props","_jsxs","children","_jsx","classID","onClick","isOn","Array","numRows","fill","numCols","setGoal","setStart","Randomizer","style","display","type","randLevel","onChange","event","target","isNaN","setRandLevel","newArr","Math","random","getColor","isCA","oneIsColor","cellValue","Board","arr","gridTemplateColumns","pxSize","width","height","backgroundColor","border","isSelectingGoal","setIsSelectingGoal","isSelectingStart","setIsSelectingStart","setValue","rules","ruleList","CAPanel","currRule","val","setCurrRule","setLive","setSurv","className","newLive","newSurv","CAMazeSelector","setIsCA","Spacer","MazePanel","currMazeRule","setCurrMazeRule","Game","useState","useRef","useEffect","g","App","ReactDOM","render","_Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.b2b3e38f.chunk.js","sourcesContent":["const CA = {\n    ALIVE : 1, \n    DEAD : 0\n};\n\nconst MAZE = {\n    EMPTY_PATH : 0,\n    WALL : 1,\n    SEARCHED : 2,\n    PATH_TO_BE_SEARCHED : 3,\n    START : 4,\n    GOAL : 5,\n    PATH_FOUND : 6,\n\tDFS : \"depth first search (DFS)\",\n\tBFS : \"breath first search (BFS)\"\n};\n\nexport {CA, MAZE};","import * as ENUM from './enums.js';\n\nconst neighbors = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n];\n\nexport class CA {\n    grid;\n    live;\n    surv;\n    setGrid;\n    isOnRef;\n\n    constructor(grid, live, surv, setGrid, isOnRef) {\n        this.grid = grid;\n        this.live = live;\n        this.surv = surv;\n        this.setGrid = setGrid;\n        this.isOnRef = isOnRef;\n\n        return this;\n    }\n\n    show() {\n        if (this.isOnRef.current) {\n            this.ca();\n            this.setGrid(this.grid);\n            setTimeout(() => this.show(), 10);\n        }\n    }\n\n    countNeighbor(i, k) {\n        var currCount = 0;\n\n        for (let [w, h] of neighbors) {\n            const x = i + w;\n            const y = k + h;\n\n            if (x >= 0 && x < this.grid.length && y >= 0 && y < this.grid[0].length){\n               currCount += this.grid[x][y] === ENUM.CA.DEAD ? 0 : 1; \n            }\n        }\n\n        return currCount;\n    }\n\n    ca() {\n        var newGrid = this.grid.map((a) => a.slice());\n        this.grid.forEach((row, i) => {\n            row.forEach((col, k) => {\n                var nbCount = this.countNeighbor(i, k);\n               if ((this.grid[i][k] && !this.surv[nbCount]) || (!this.grid[i][k] && this.live[nbCount])) {\n                newGrid[i][k] = newGrid[i][k] === ENUM.CA.DEAD ? ENUM.CA.ALIVE : ENUM.CA.DEAD;\n               }\n            })\n        })\n        this.grid = newGrid;\n    }\n\n\n}","import { MAZE } from \"./enums\";\n\nclass Queue {\n    #q;\n    #front;\n    #back;\n    length;\n    constructor() {\n        this.#q = [];\n        this.#front = 0;\n        this.#back = 0;\n        this.length = 0;\n    }\n    push(obj) {\n        this.#q.push(obj);\n        this.length++;\n        this.#back++;\n    }\n    pop() {\n        if (this.isEmpty()) return undefined;\n        var ret = this.#q[this.#front];\n        this.#front++;\n        this.length--;\n        return ret;\n    }\n    isEmpty() {\n        return this.length === 0;\n    }\n}\n\nconst neighbors = [[-1, 0], [0, -1], [0, 1], [1, 0]];\n\nclass Maze {\n    #setGrid;\n    #visited;\n    #start;\n    #goal;\n    #toVisit;\n    #paths;\n    #grid;\n    #isOnRef;\n    #setCannotFindPath;\n    #setFoundGoal;\n\t#setIsOn;\n\n    constructor(rule, setGrid, start, goal, grid, isOnRef, setIsOn) {\n        this.#setGrid = setGrid;\n        this.#grid = grid;\n        this.#goal = goal;\n        this.#start = start;\n        switch(rule) {\n            case(MAZE.BFS) :\n                this.#toVisit = new Queue();\n                break;\n            case(MAZE.DFS) :\n                this.#toVisit = [];\n                break;\n\t\t\tdefault :\n\t\t\t\tthrow new Error(\"wrong rule\");\n        }\n        this.#paths = {};\n        this.#isOnRef = isOnRef;\n\t\tthis.#setIsOn = setIsOn;\n    }\n\n    getInBoundNeighbors(i, k) {\n        var nb = [];\n        for (let [w, h] of neighbors) {\n            const x = i + w;\n            const y = k + h;\n            if (x >= 0 && x < this.#grid.length && y >= 0 && y < this.#grid[0].length) {\n                nb.push([x, y]);\n            }\n        }\n        return nb;\n    }\n\n    deepcopy(grid) {\n        return grid.map((a) => a.slice());\n    }\n\n    show() {\n        var grid = this.deepcopy(this.#grid);\n        for (let n of this.getInBoundNeighbors(this.#start[0], this.#start[1])) {\n\t\t\tvar [n_x,n_y] = n;\n            switch(this.#grid[n_x][n_y]) {\n                case(MAZE.GOAL) :\n\t\t\t\t\tthis.#setIsOn(false);\n\t\t\t\t\tthis.#isOnRef.current = false;\n\t\t\t\t\treturn;\n                case(MAZE.EMPTY_PATH) :\n                    this.#toVisit.push([n_x,n_y]);\n                    grid[n_x][n_y] = MAZE.PATH_TO_BE_SEARCHED;\n\t\t\t\t\tthis.#paths[`${n}`] = [n];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault :\n\t\t\t\t\tbreak;\n            }\n\t\t\t\n        }\n        this.#grid = grid;\n        this.#setGrid(grid);\n        setTimeout(()=>this.search(), 10);\n    }\n\n    search() {\n\t\tif (this.#isOnRef.current === false) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (this.#toVisit.length === 0) {\n\t\t\talert(\"could not find path to goal\");\n\t\t\tthis.#setIsOn(false);\n\t\t\tthis.#isOnRef.current = false;\n\t\t}\n\t\t\n\t\tlet cell = this.#toVisit.pop();\n\t\tif (!cell) return;\n\t\tvar grid = this.deepcopy(this.#grid);\n\t\tfor (let n of this.getInBoundNeighbors(cell[0], cell[1])) {\n\t\t\tlet [n_x,n_y] = n;\n\t\t\tlet nVal = this.#grid[n_x][n_y];\n\t\t\tswitch(nVal) {\n\t\t\t\tcase (MAZE.EMPTY_PATH) :\n\t\t\t\t\tgrid[n_x][n_y] = MAZE.PATH_TO_BE_SEARCHED;\n\t\t\t\t\tthis.#toVisit.push(n);\n\t\t\t\t\tvar pathsToN = [...this.#paths[`${cell}`]];\n\t\t\t\t\tpathsToN.push(n);\n\t\t\t\t\tthis.#paths[`${n}`] = pathsToN;\n\t\t\t\t\tbreak;\n\t\t\t\tcase (MAZE.GOAL) :\n\t\t\t\t\tfor (let [p_x, p_y] of this.#paths[`${cell}`]) {\n\t\t\t\t\t\tgrid[p_x][p_y] = MAZE.PATH_FOUND;\n\t\t\t\t\t}\n\t\t\t\t\tthis.#setGrid(grid);\n\t\t\t\t\tthis.#setIsOn(false);\n\t\t\t\t\tthis.#isOnRef.current = false;\n\t\t\t\t\treturn;\n\t\t\t\tdefault :\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tgrid[cell[0]][cell[1]] = MAZE.SEARCHED;\n\t\tthis.#grid = grid;\n\t\tthis.#setGrid(grid);\n\t\t\n\t\tsetTimeout(() => this.search(), 10);\n\t\t\n    }\n}\n\nexport default Maze;","export default function PlayPauseReset(props) {\n  return <div>\n          <button classID=\"playPauseButton\" onClick={() => {\n            props.setIsOn(!props.isOn);\n            props.isOnRef.current = !props.isOn;\n            }}>\n            {!props.isOn ? \"play\" : \"pause\"}\n          </button>\n          \n          {!props.isOn && <button classID=\"resetButton\" onClick={() => {\n            props.setGrid(() => Array(props.numRows).fill().map(() => new Array(props.numCols).fill(0)));\n\t\t\t\t\t   props.setGoal([-1,-1]);\n\t\t\t\t\t   props.setStart([-1,-1]);\n            }}>\n            {\"reset\"}\n          </button>}\n  </div>\n}","import {CA} from './enums.js';\nexport default function Randomizer(props) {\n  return <div style={{display: \"flex\"}}>\n          <form>\n            <label>\n              random level (0 - 1): \n              <input type=\"text\" value={props.randLevel} onChange={\n                (event) => \n                  {let value = event.target.value;\n                    if (!isNaN(value) && value >= 0 && value <= 1) props.setRandLevel(event.target.value);\n              }}/>\n            </label>\n          </form>\n          <button onClick={() => {\n            var newArr = new Array(props.numRows).fill().map(\n              () => new Array(props.numCols).fill().map(\n                () => Math.random() < props.randLevel ? CA.ALIVE : CA.DEAD));\n            props.setGrid(newArr);\n          }}>randomize!</button>\n      </div>\n}","import { CA, MAZE } from './enums';\nconst pxSize = 8;\n\nfunction getColor(isCA, oneIsColor, cellValue) {\n  if (isCA) {\n    switch (cellValue) {\n      case (CA.DEAD):\n        return \"white\";\n      default:\n        return \"green\";\n    }\n  } else {\n    switch (cellValue) {\n      case (MAZE.EMPTY_PATH):\n        return \"white\";\n      case (MAZE.WALL):\n        return \"black\";\n      case (MAZE.GOAL):\n        return \"deeppink\";\n      case (MAZE.PATH_FOUND):\n        return \"salmon\";\n      case (MAZE.PATH_TO_BE_SEARCHED):\n        return \"lightseagreen\";\n      case (MAZE.SEARCHED):\n        return \"paleturquoise\";\n      case (MAZE.START):\n        return \"darkgreen\";\n      default:\n        return \"red\";\n    }\n  }\n}\n\nfunction setValue(i, k, arr, props) {\n\tif (props.isOn) return;\n  var newArr = [...arr];\n  if (props.isCA) {\n    // var newArr = [...arr];\n    newArr[i][k] = arr[i][k] === CA.DEAD ? CA.ALIVE : CA.DEAD;\n    props.setGrid(newArr);\n  } else {\n    if (props.isSelectingGoal) {\n      // var newArr = [...arr];\n      newArr[i][k] = MAZE.GOAL;\n      if (props.goal[0] !== -1) newArr[props.goal[0]][props.goal[1]] = MAZE.WALL;\n\n      props.setGoal([i, k]);\n      props.setIsSelectingGoal(false);\n      props.setGrid(newArr);\n    } else if (props.isSelectingStart) {\n      // var newArr = [...arr];\n      newArr[i][k] = MAZE.START;\n      if (props.start[0] !== -1) newArr[props.start[0]][props.start[1]] = MAZE.WALL;\n\n      props.setStart([i,k]);\n      props.setIsSelectingStart(false);\n      props.setGrid(newArr);\n    } else {\n      // var newArr = [...arr];\n      if (arr[i][k] === MAZE.WALL) {\n\t\t\tnewArr[i][k] = MAZE.EMPTY_PATH;\n\t  } else if (arr[i][k] === MAZE.EMPTY_PATH) {\n\t\t  newArr[i][k] = MAZE.WALL;\n\t  }\n\n      props.setGrid(newArr);\n\n    }\n\n  }\n}\n\nexport default function Board(props) {\n  const arr = props.grid;\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${props.numCols}, ${pxSize + 2}px)`\n      }}>\n      {arr.map((row, i) => (\n        row.map((col, k) => (\n          <div\n            key={`${i}-${k}`}\n            style={{\n              width: pxSize,\n              height: pxSize,\n              backgroundColor: getColor(props.isCA, props.oneIsColor, arr[i][k]),\n              border: \"solid 1px black\"\n            }}\n            onClick={() => {\n              setValue(i, k, arr, props);\n            }}\n          />\n        ))\n      ))}\n    </div>\n  );\n}","const buttonSize = 20;\n\nconst rules = {\n  'maze' : {\n    surv : [0, 1, 1, 1, 1, 1, 0, 0, 0],\n    live : [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  },\n\n  'mazectric' : {\n    surv : [0, 1, 1, 1, 1, 0, 0, 0, 0],\n    live : [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  },\n\n  'game of life' : {\n    surv : [0, 0, 1, 1, 0, 0, 0, 0, 0],\n    live : [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  },\n};\n\nconst ruleList = [\n  'maze', 'mazectric', 'game of life', 'free',\n];\n\nfunction CAPanel(props) {\n  return (\n    <div>\n      <form>\n        <label>\n          Select rule \n          <select value={props.currRule} onChange={(event) => {\n            const val = event.target.value;\n            props.setCurrRule(val);\n            if (val !== 'free') {\n            props.setLive(rules[val]['live']);\n            props.setSurv(rules[val]['surv']);\n          } else {\n            props.setLive(new Array(9).fill(0));\n            props.setSurv(new Array(9).fill(0));\n          }}}>\n            {ruleList.map((rule) => <option value={rule} key={`${rule}`}>{rule}</option>)}\n          </select>\n        </label>\n      </form>\n      <div> \n        <h3>A cell will come to life with</h3>\n        <div style={{display: \"flex\"}}>\n          {props.live.map((val, i) => \n            <div key={i} \n              className='botton'\n              style={{\n                height: buttonSize, \n                width: buttonSize, \n                backgroundColor: val ? \"lightgreen\" : \"white\",\n                border: \"solid 1px black\"}}\n                onClick={() => {\n                if (props.currRule === 'free') {\n                  var newLive = [...props.live];\n                  newLive[i] = !props.live[i];\n                  props.setLive(newLive);\n                }\n              }}>\n            {i}\n            </div>)}\n        </div>\n        <h3>living neighbors,</h3>\n        <h3>and survive with</h3>\n        <div style={{display: \"flex\"}}>\n          {props.surv.map((val, i) => \n            <div key={i} \n              className='botton'\n              style={{\n                height: buttonSize, \n                width: buttonSize, \n                backgroundColor: val ? \"skyblue\" : \"white\",\n                border: \"solid 1px black\"}}\n              onClick={() => {\n                if (props.currRule === 'free') {\n                  var newSurv = [...props.surv];\n                  newSurv[i] = !props.surv[i];\n                  props.setSurv(newSurv);\n                 }\n                }}>\n            {i}\n            </div>)}\n        </div>\n        <h3>living neighbors,</h3>\n        <h3>or be dead otherwise.</h3>\n        \n      </div>\n    </div>\n  )\n}\n\nexport default CAPanel;","\nexport default function CAMazeSelector(props) {\n  return (\n    <div style={{display:\"flex\"}}>\n      <div \n        classID={\"CAOption\"}\n        style={{\n          width: 140,\n          height: 20,\n          backgroundColor: props.isCA ? \"pink\" : \"white\",\n          border: \"solid 1px black\"\n        }}\n        onClick={() => {if(!props.isOn) props.setIsCA(true)}}\n      >Cellular Automata</div>\n      <div \n        classID={\"MazeOption\"}\n        style={{\n          width: 100,\n          height: 20,\n          backgroundColor: !props.isCA ? \"pink\" : \"white\",\n          border: \"solid 1px black\"\n        }}\n        onClick={() => {if(!props.isOn) props.setIsCA(false);}}\n      >Maze</div>\n    </div>\n  )\n}","import {MAZE} from './enums.js';\n\n\nfunction Spacer() {\n  return <div style={{width: 20, height: 20}}/>\n}\n\nconst ruleList = [MAZE.DFS, MAZE.BFS];\nfunction MazePanel(props) {\n  //TODO\n  return (\n    <div>\n <form>\n        <label>\n          Select path finding rule \n          <select value={props.currMazeRule} onChange={(event) => {\n            const val = event.target.value;\n            props.setCurrMazeRule(val);\n          }}>\n            {ruleList.map((rule) => <option value={rule} key={`${rule}`}>{rule}</option>)}\n          </select>\n        </label>\n      </form>\n\t\t<Spacer/>\t\t  \n      <div \n        classID={\"SelectStart\"}\n        style={{\n          // width: 140,\n          height: 20,\n          backgroundColor: props.isSelectingStart ? \"darkgreen\" : \"white\",\n          border: \"solid 1px black\"\n        }}\n        onClick={() => props.setIsSelectingStart(!props.isSelectingStart)}\n      >{props.isSelectingStart ? \"pick!\" : \"click to pick your starting point\"}</div>\n\t\t<Spacer/>\t\t  \n      <div \n        classID={\"SelectGoal\"}\n        style={{\n          // width: 140,\n          height: 20,\n          backgroundColor: props.isSelectingGoal ? \"deeppink\" : \"white\",\n          border: \"solid 1px black\"\n        }}\n        onClick={() => props.setIsSelectingGoal(!props.isSelectingGoal)}\n      >{props.isSelectingGoal ? \"pick!\" : \"click to pick your goal\"}</div>\n    </div>\n  )\n}\n\nexport default MazePanel;","import React, { useState, useRef, useEffect } from 'react';\nimport * as ca from \"./CA.js\";\nimport Maze from \"./Maze.js\";\nimport PlayPauseReset from \"./PlayPauseReset.js\";\nimport Randomizer from './Randomizer.js';\nimport Board from './Board.js';\nimport CAPanel from './CAPanel.js';\nimport CAMazeSelector from './CAMazeSelector.js';\nimport MazePanel from './MazePanel.js';\nimport { CA, MAZE } from './enums.js';\nconst numRows = 70;\nconst numCols = 70;\n\nfunction Spacer() {\n  return <div style={{ width: 20, height: 20 }} />\n}\n\nfunction Game() {\n  // universal\n  var [isOn, setIsOn] = useState(false);\n  var [grid, setGrid] = useState(() => Array(numRows).fill().map(() => new Array(numCols).fill(0)));\n  const isOnRef = useRef(isOn);\n\n  // CA\n  var [surv, setSurv] = useState([0, 0, 1, 1, 0, 0, 0, 0, 0]);\n  var [live, setLive] = useState([0, 0, 0, 1, 0, 0, 0, 0, 0]);\n  var [currRule, setCurrRule] = useState('game of life');\n  var [isCA, setIsCA] = useState(false);\n  var [randLevel, setRandLevel] = useState(0.05);\n\n  // MAZE\n  var [isSelectingStart, setIsSelectingStart] = useState(false);\n  var [isSelectingGoal, setIsSelectingGoal] = useState(false);\n  var [currMazeRule, setCurrMazeRule] = useState(MAZE.DFS);\n  var [start, setStart] = useState([-1, -1]);\n  var [goal, setGoal] = useState([-1, -1]);\n\t\n  useEffect(() => {\n\t  if (!isOn) return;\n    if (isCA) {\n      var c = new ca.CA(grid, live, surv, setGrid, isOnRef);\n      c.show();\n    } else {\n\t\tif (goal[0] === -1 || start[0] === -1) {\n\t\t\talert(\"set start and/or goal and try again\");\n\t\t\tsetIsOn(false);\n\t\t\tisOnRef.current = false;\n\t\t\treturn;\n\t\t}\n\t\tvar m = new Maze(currMazeRule, setGrid, start, goal, grid, isOnRef, setIsOn);\n\t\tm.show();\n    }\n  }, [isOn]);\n\t\n  useEffect(() => {\n\t  if (isCA && !isOn && (start[0] !== -1 || goal[0] !== -1) ) {\n\t\t\t\tvar g = grid.map((a) => a.slice());\n\t\t if (start[0] !== -1) {\n\t\t\t \tg[start[0]][start[1]] = CA.ALIVE;\n\t\t\t \tsetStart([-1,-1]);\n\t\t } \n\t\t  if (goal[0] !== -1) {\n\t\t\t \tg[goal[0]][goal[1]] = CA.ALIVE;\n\t\t\t \tsetGoal([-1,-1]);\n\t\t  }\n\t\t  setGrid(g);\n\t  }\n  }, [isCA]);\n\n  return (\n    <div>\n      <div style={{ display: \"flex\" }}>\n        <Board grid={grid} setGrid={setGrid} rule={currRule} isOn={isOn} numCols={numCols} numRows={numRows} isCA={isCA} isSelectingGoal={isSelectingGoal} setIsSelectingGoal={setIsSelectingGoal} isSelectingStart={isSelectingStart} setIsSelectingStart={setIsSelectingStart} start={start} setStart={setStart} goal={goal} setGoal={setGoal}/>\n\n        <Spacer />\n\n        <div>\n          <CAMazeSelector isCA={isCA} setIsCA={setIsCA} isOn={isOn} />\n\n          <Spacer />\n\n          <div>\n            {isCA ?\n              <CAPanel currRule={currRule} setCurrRule={setCurrRule} surv={surv} setSurv={setSurv} live={live} setLive={setLive} />\n              :\n              <MazePanel currMazeRule={currMazeRule} setCurrMazeRule={setCurrMazeRule} isSelectingGoal={isSelectingGoal} setIsSelectingGoal={setIsSelectingGoal} isSelectingStart={isSelectingStart} setIsSelectingStart={setIsSelectingStart} isOn={isOn} />}\n          </div>\n\n          <Spacer />\n\n          <PlayPauseReset setIsOn={setIsOn} isOn={isOn} isOnRef={isOnRef} setGrid={setGrid} numRows={numRows} numCols={numCols} setStart={setStart} setGoal={setGoal} isCA={isCA} />\n\n          <Spacer />\n\n          <Randomizer setGrid={setGrid} randLevel={randLevel} setRandLevel={setRandLevel} numRows={numRows} numCols={numCols} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Game;\n","import Game from './Game.js';\n\nfunction App() {\n\n return (\n   <Game />\n )\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <h1>\n      Cellular Automata / Maze (coming up)\n    </h1>\n    <div>\n      <App />\n    </div>\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}