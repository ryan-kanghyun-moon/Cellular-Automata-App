{"version":3,"sources":["CA.js","PlayPauseReset.js","Randomizer.js","Board.js","CAPanel.js","CAMazeSelector.js","MazePanel.js","Game.js","App.js","index.js"],"names":["neighbors","CA","constructor","grid","live","surv","setGrid","isOnRef","this","show","current","ca","setTimeout","countNeighbor","i","k","currCount","w","h","x","y","length","newGrid","map","a","slice","forEach","row","col","nbCount","PlayPauseReset","props","_jsxs","children","_jsx","classID","onClick","setIsOn","isOn","Array","numRows","fill","numCols","Randomizer","style","display","type","value","randLevel","onChange","event","target","Number","setRandLevel","newArr","Math","random","Board","arr","gridTemplateColumns","concat","pxSize","width","height","backgroundColor","oneIsColor","border","rules","ruleList","Spacer","CAPanel","currRule","val","setCurrRule","setLive","setSurv","rule","className","newLive","newSurv","setOneIsColor","CAMazeSelector","isCA","setIsCA","MazePanel","Game","useState","useRef","useEffect","App","ReactDOM","render","_Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.e9431ecc.chunk.js","sourcesContent":["\nconst neighbors = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n];\n\nexport class CA {\n    grid;\n    live;\n    surv;\n    setGrid;\n    isOnRef;\n\n    constructor(grid, live, surv, setGrid, isOnRef) {\n        this.grid = grid;\n        this.live = live;\n        this.surv = surv;\n        this.setGrid = setGrid;\n        this.isOnRef = isOnRef;\n\n        return this;\n    }\n\n    show() {\n        if (this.isOnRef.current) {\n            this.ca();\n            this.setGrid(this.grid);\n            setTimeout(() => this.show(), 10);\n        }\n    }\n\n    countNeighbor(i, k) {\n        var currCount = 0;\n\n        for (let [w, h] of neighbors) {\n            const x = i + w;\n            const y = k + h;\n\n            if (x >= 0 && x < this.grid.length && y >= 0 && y < this.grid[0].length){\n               currCount += this.grid[x][y]; \n            }\n        }\n\n        return currCount;\n    }\n\n    ca() {\n        var newGrid = this.grid.map((a) => a.slice());\n        this.grid.forEach((row, i) => {\n            row.forEach((col, k) => {\n                var nbCount = this.countNeighbor(i, k);\n               if ((this.grid[i][k] && !this.surv[nbCount]) || (!this.grid[i][k] && this.live[nbCount])) {\n                newGrid[i][k] = !newGrid[i][k];\n               }\n            })\n        })\n        this.grid = newGrid;\n    }\n\n\n}","export default function PlayPauseReset(props) {\n  return <div>\n          <button classID=\"playPauseButton\" onClick={() => {\n            props.setIsOn(!props.isOn);\n            props.isOnRef.current = !props.isOn;\n            }}>\n            {!props.isOn ? \"play\" : \"pause\"}\n          </button>\n          \n          {!props.isOnRef.current&& <button classID=\"resetButton\" onClick={() => {\n            props.setGrid(() => Array(props.numRows).fill().map(() => new Array(props.numCols).fill(0)));\n            }}>\n            {\"reset\"}\n          </button>}\n  </div>\n}","export default function Randomizer(props) {\n  return <div style={{display: \"flex\"}}>\n          <form>\n            <label>\n              random level (0 - 1): \n              <input type=\"text\" value={props.randLevel} onChange={\n                (event) => \n                  {let value = event.target.value;\n                    if (Number(value) == value && value >= 0 && value <= 1) props.setRandLevel(event.target.value);\n              }}/>\n            </label>\n          </form>\n          <button onClick={() => {\n            var newArr = new Array(props.numRows).fill().map(\n              () => new Array(props.numCols).fill().map(\n                () => Math.random() < props.randLevel ? 1 : 0));\n            props.setGrid(newArr);\n          }}>randomize!</button>\n      </div>\n}","const pxSize = 8;\n\nexport default function Board(props) {\n  const arr = props.grid;\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${props.numCols}, ${pxSize + 2}px)`\n      }}>\n      {arr.map((row, i) => (\n          row.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              style={{\n                width: pxSize,\n                height: pxSize,\n                backgroundColor: (arr[i][k] && props.oneIsColor) || (!arr[i][k] && !props.oneIsColor) ? \"green\" : \"white\",\n                border: \"solid 1px black\"\n              }}\n              onClick={() => {\n                if (!props.isOn) {\n                  var newArr = [...arr];\n                  newArr[i][k] = !arr[i][k];\n                  props.setGrid(newArr);\n                 \n                }\n              }}\n            />\n          ))\n      ))}\n    </div>\n  );\n}","const buttonSize = 20;\n\nconst rules = {\n  'maze' : {\n    surv : [0, 1, 1, 1, 1, 1, 0, 0, 0],\n    live : [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  },\n\n  'mazectric' : {\n    surv : [0, 1, 1, 1, 1, 0, 0, 0, 0],\n    live : [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  },\n\n  'game of life' : {\n    surv : [0, 0, 1, 1, 0, 0, 0, 0, 0],\n    live : [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  },\n};\n\nconst ruleList = [\n  'maze', 'mazectric', 'game of life', 'free',\n];\n\nfunction CAPanel(props) {\n  return (\n    <div>\n      <form>\n        <label>\n          Select rule \n          <select value={props.currRule} onChange={(event) => {\n            const val = event.target.value;\n            props.setCurrRule(val);\n            if (val !== 'free') {\n            props.setLive(rules[val]['live']);\n            props.setSurv(rules[val]['surv']);\n          } else {\n            props.setLive(new Array(9).fill(0));\n            props.setSurv(new Array(9).fill(0));\n          }}}>\n            {ruleList.map((rule) => <option value={rule} key={`${rule}`}>{rule}</option>)}\n          </select>\n        </label>\n      </form>\n      <div> \n        <h3>A cell will come to life with</h3>\n        <div style={{display: \"flex\"}}>\n          {props.live.map((val, i) => \n            <div key={i} \n              className='botton'\n              style={{\n                height: buttonSize, \n                width: buttonSize, \n                backgroundColor: val ? \"lightgreen\" : \"white\",\n                border: \"solid 1px black\"}}\n                onClick={() => {\n                if (props.currRule === 'free') {\n                  var newLive = [...props.live];\n                  newLive[i] = !props.live[i];\n                  props.setLive(newLive);\n                }\n              }}>\n            {i}\n            </div>)}\n        </div>\n        <h3>living neighbors,</h3>\n        <h3>and survive with</h3>\n        <div style={{display: \"flex\"}}>\n          {props.surv.map((val, i) => \n            <div key={i} \n              className='botton'\n              style={{\n                height: buttonSize, \n                width: buttonSize, \n                backgroundColor: val ? \"skyblue\" : \"white\",\n                border: \"solid 1px black\"}}\n              onClick={() => {\n                if (props.currRule === 'free') {\n                  var newSurv = [...props.surv];\n                  newSurv[i] = !props.surv[i];\n                  props.setSurv(newSurv);\n                 }\n                }}>\n            {i}\n            </div>)}\n        </div>\n        <h3>living neighbors,</h3>\n        <h3>or be dead otherwise.</h3>\n        \n        <Spacer/>\n\n        <button onClick={() => {props.setOneIsColor(!props.oneIsColor)}}>flip color scheme!</button>\n      </div>\n    </div>\n  )\n}\n\nfunction Spacer() {\n  return <div style={{width: 20, height: 20}}/>\n}\n\nexport default CAPanel;","\nexport default function CAMazeSelector(props) {\n  return (\n    <div style={{display:\"flex\"}}>\n      <div \n        classID={\"CAOption\"}\n        style={{\n          width: 130,\n          height: 20,\n          backgroundColor: props.isCA ? \"pink\" : \"white\",\n          border: \"solid 1px black\"\n        }}\n        onClick={() => props.setIsCA(true)}\n      >Cellular Automata</div>\n      <div \n        classID={\"MazeOption\"}\n        style={{\n          width: 130,\n          height: 20,\n          backgroundColor: !props.isCA ? \"pink\" : \"white\",\n          border: \"solid 1px black\"\n        }}\n        onClick={() => props.setIsCA(false)}\n      >Maze</div>\n    </div>\n  )\n}","function MazePanel(props) {\n  //TODO\n  return (\n    <div>\n      Maze panel - coming very very soon!\n    </div>\n  )\n}\n\nexport default MazePanel;","import React, { useState, useRef, useEffect } from 'react';\nimport * as ca from \"./CA.js\";\nimport PlayPauseReset from \"./PlayPauseReset.js\";\nimport Randomizer from './Randomizer.js';\nimport Board from './Board.js';\nimport CAPanel from './CAPanel.js';\nimport CAMazeSelector from './CAMazeSelector.js';\nimport MazePanel from './MazePanel.js';\nconst numRows = 100;\nconst numCols = 100;\n\nfunction Spacer() {\n  return <div style={{width: 20, height: 20}}/>\n}\n\nfunction Game() {\n  var [grid, setGrid] = useState(() => Array(numRows).fill().map(() => new Array(numCols).fill(0)));\n  var [surv, setSurv] = useState([0, 0, 1, 1, 0, 0, 0, 0, 0]);\n  var [live, setLive] = useState([0, 0, 0, 1, 0, 0, 0, 0, 0]);\n  var [currRule, setCurrRule] = useState('game of life');\n  var [isCA, setIsCA] = useState(true);\n  var [isOn, setIsOn] = useState(false);\n  var [randLevel, setRandLevel] = useState(0.05);\n  var [oneIsColor, setOneIsColor] = useState(true);\n  \n  const isOnRef = useRef(isOn);\n  useEffect(() => {\n      var c = new ca.CA(grid, live, surv, setGrid, isOnRef);\n      c.show();\n  }, [isOn]);\n  \n  return (\n    <div>\n      <div style={{display:\"flex\"}}>\n        <Board grid={grid} setGrid={setGrid} rule={currRule} isOn={isOn} oneIsColor={oneIsColor} numCols={numCols} numRows={numRows} />\n       \n        <Spacer/>\n\n        <div>\n          <CAMazeSelector isCA={isCA} setIsCA={setIsCA}/>\n\n          <Spacer/>\n          \n          <div>\n            {isCA ?  \n              <CAPanel currRule={currRule} setCurrRule={setCurrRule} surv={surv} setSurv={setSurv} live={live} setLive={setLive} oneIsColor={oneIsColor} setOneIsColor={setOneIsColor}/>\n              :\n              <MazePanel/>}\n          </div>\n\n          <Spacer/>\n\n          <PlayPauseReset setIsOn={setIsOn} isOn={isOn} isOnRef={isOnRef} setGrid={setGrid} numRows={numRows} numCols={numCols} />\n        </div>\n      </div>\n\n      <Spacer/>\n\n      <Randomizer setGrid={setGrid} randLevel={randLevel} setRandLevel={setRandLevel} numRows={numRows} numCols={numCols} />\n\n    </div>\n  ) \n}\n\nexport default Game;\n","import Game from './Game.js';\n\nfunction App() {\n\n return (\n   <Game />\n )\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <h1>\n      Cellular Automata / Maze (coming up)\n    </h1>\n    <div>\n      <App />\n    </div>\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}